version: 0.2

env:
  variables:
    AWS_ACCOUNT_ID: "183295452329"  # Replace with your AWS account ID
    AWS_REGION: "us-east-1"              # Replace with your AWS region (e.g., us-east-1)
    ECR_REPOSITORY: "my-tomcat-app"          # Replace with your ECR repository name
    IMAGE_TAG: "latest"                      # Docker image tag
    ECS_CLUSTER: "my-tomcat-cluster"         # Replace with your ECS cluster name
    ECS_SERVICE: "my-tomcat-service"         # Replace with your ECS service name
    TASK_DEFINITION: "my-farget-task"        # Replace with your ECS task definition name

phases:
  install:
    commands:
    - echo "Installing dependencies..."
      - apt-get update && apt-get install -y docker.io jq
      - sudo apt update -y
      - sudo apt upgrade -y
      - sudo apt install unzip
      - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      - unzip awscliv2.zip
      - sudo ./aws/install
      - for pkg in docker.io docker-doc docker-compose podman-docker containerd runc; do 
          sudo apt-get remove <span class="math-inline">pkg; 
done
\- sudo apt\-get update
\- sudo apt\-get install ca\-certificates curl gnupg</2\> \-y
\- sudo <3\>install \-m 0755 \-d /etc/apt/keyrings
\- curl \-fsSL https\://download\.docker\.com/linux/ubuntu/gpg \| <4\>sudo gpg \-\-dearmor \-o /etc/apt/keyrings/docker\.gpg</3\>
\- sudo chmod a\+r /etc/apt/keyrings/docker\.<3\>gpg
\- echo "deb \[arch\=</span>(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "<span class="math-inline">VERSION\_CODENAME"\) <5\>stable" \| sudo tee /etc/apt/sources\.list\.d/docker\.list \> /dev/null
\- sudo apt\-get update</3\>
\- sudo apt\-get install docker\-ce docker\-ce\-cli containerd\.io docker\-buildx\-plugin docker\-compose\-plugin</5\> \-y
\- sudo docker run hello\-world
\- sudo curl \-<6\>L "https\://github\.com/docker/compose/releases/latest/download/docker\-compose\-</span>(uname -s)-<span class="math-inline">\(uname \-m\)" \-o /usr/bin/docker\-compose
\- sudo chmod \+x /usr/bin/docker\-compose</6\>
\- echo "Creating add\_users\_to\_docker\_group\.sh"
\- cat <<EOF \> add\_users\_to\_docker\_group\.sh
\#\!/bin/bash
for user in /home/\*; do
username\=</span>(basename "$user")
  sudo usermod -aG docker "$username" 2>/dev/null 
done
EOF
      - chmod +x add_users_to_docker_group.sh 
      - ./add_users_to_docker_group.sh 
  pre_build:
    commands:
      - echo "Logging in to Amazon ECR..."
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

  build:
    commands:
      - echo "Building Docker image..."
      - docker build -t $ECR_REPOSITORY:$IMAGE_TAG .

  post_build:
    commands:
      - echo "Tagging Docker image..."
      - docker tag $ECR_REPOSITORY:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
      - echo "Pushing Docker image to ECR..."
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
      - echo "Updating ECS task definition..."
      - TASK_DEFINITION_ARN=$(aws ecs describe-task-definition --task-definition $TASK_DEFINITION --region $AWS_REGION | jq -r '.taskDefinition.taskDefinitionArn')
      - echo "Task Definition ARN: $TASK_DEFINITION_ARN"
      - echo "Updating ECS service..."
      - aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition $TASK_DEFINITION --region $AWS_REGION --force-new-deployment

artifacts:
  files:
    - '**/*' 

**Key Changes:**

- **Using `cat` for Multiline Script:** Instead of multiple `echo` commands, we use `cat` with a heredoc (`EOF`) to create the script content in a single, properly formatted block. This avoids potential indentation issues and improves readability.

This corrected version should now successfully parse the `buildspec.yml` file and proceed with the build process without encountering the "YAML_FILE_ERROR".

Remember to replace the placeholder values with your actual AWS credentials and resource names.
